################################################################################
################################################################################
##																			  ##
##                     			SETTING PROBLEM								  ##
##																			  ##
################################################################################
################################################################################

# Load standard model
model ESTD_fmin_Wall.mod;

#data ESTD_Wallonia.dat			# not TDs depending data
data ESTD_2020.dat    	# not TDs depending data
data ESTD_12TD_REFCASE.dat; 	# TDs depending data

################################################################################
################################################################################
##																			  ##
##                      	SOLVER OPTIONS       							  ##
##																			  ##
################################################################################
################################################################################

#option solver cplex; # for Windows users
option solver './cplex'; # for Mac users

option show_stats 1; # show statistics

option cplex_options  'mipdisplay 5 mipinterval 1000';
option log_file 'log.txt';   #write the log in a .txt file. Create the file before running.


option cplex_options $cplex_options 'mipgap 0.01 ';
option cplex_options $cplex_options 'timelimit 64800 ';


################################################################################
################################################################################
##																			  ##
##                      	RUN & SAVE PATH      							  ##
##																			  ##
################################################################################
################################################################################


param PathName symbolic default "output/";
	/*for {gwp in {5500 .. 250 by -250}}{{
		let TotalGWP := gwp; # GL : Assigner la nouvelle valeur du paramÃ¨tre

		let PathName := "analysis/Pareto/2020_NEW/Run" & gwp;*/

		print PathName;

		# Saving and starting from last solution. Starting from last solution is not very efficient.
		# option cplex_options $cplex_options 'startsol ./output/solution.sol '; # to read previously existing file
		# option cplex_options $cplex_options 'endsol ./output/solution.sol '; # to write file

		option times 1; # show time
		option gentimes 1; # show time

		solve;

		display solve_result_num;
		display _solve_elapsed_time;

		## Saving sets and parameters to output file

		option times 0; # show time
		option gentimes 0; # show time


		if solve_result = "limit" # To avoid post treatment error
		then print "TIME OUT";
		else {

			################################################################################
			################################################################################
			##																			  ##
			##                     			SAVING RESULTS								  ##
			##																			  ##
			################################################################################
			################################################################################
			## Saving sets and parameters to output file
			option show_stats 0; # show statistics
			option times 0; # show time
			option gentimes 0; # show time

#------------------------------------------
			## Print cost breakdown to txt file.
			#------------------------------------------
			print "--------------SAVING COST -----------";
			printf "%s\t%s\t%s\t%s\t%s\n", "Name","C_inv","C_maint","C_Op","Incentives" > ( PathName & "/cost_breakdown.txt");
			for {i in TECHNOLOGIES union RESOURCES}{if i in TECHNOLOGIES
			then
					printf "%s\t%.6f\t%.6f\t%.6f\t%.6f\n", gsub(i,"F","Capitalf"), tau [i] * ( C_inv [i] - R_gc [i] - R_inc [i] - R_ren [i]) , C_maint [i], 0, tau [i] * ( - R_gc [i] - R_inc [i] - R_ren [i]) > ( PathName & "/cost_breakdown.txt");
			else
					printf "%s\t%.6f\t%.6f\t%.6f\t%.6f\n", gsub(i,"F","Capitalf"), 0, 0, C_op[i], 0 > ( PathName & "/cost_breakdown.txt"); ;
			}
			

			#------------------------------------------
			## Print GWP breakdown
			#------------------------------------------
			print "--------------SAVING GWP -----------";

			#printf "\n GWP = %.2f < %.2f",TotalGWP,gwp_2011*(1-gwp_red);
			printf "%s\t%s\t%s\n", "Name", "GWP_constr", "GWP_op" > ( PathName & "/gwp_breakdown.txt");
			for {i in TECHNOLOGIES union RESOURCES}{if i in TECHNOLOGIES
			then
					printf "%s\t%.6f\t%.6f\n", gsub(i,"F","Capitalf"), GWP_constr [i] / lifetime [i], 0 > ( PathName & "/gwp_breakdown.txt");
			else
					printf "%s\t%.6f\t%.6f\n", gsub(i,"F","Capitalf"), 0, GWP_op [i] > ( PathName & "/gwp_breakdown.txt");
			}

			#------------------------------------------
			## Print losses to txt file
			#------------------------------------------
			print "--------------SAVING losses -----------";

			for {i in END_USES_TYPES}{
					printf "%s\t%.3f\n", gsub(i,"F","Capitalf"), sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t] }(Network_losses [i,h,td]
			)  > ( PathName & "/losses.txt");
			}

			#------------------------------------------
			## Print ASSETS to txt file
			#------------------------------------------
			print "--------------SAVING ASSETS -----------";
			printf "TECHNOLOGIES \t  c_inv\t c_maint\t lifetime\t  f_min\t f\t f_max\t fmin_perc\t f_perc\t fmax_perc\t c_p\t tau\t gwp_constr " > ( PathName & "/Assets.txt");
			printf "\n UNITS\t[MCHCapitalf/kW]\t [MCHCapitalf/kW]\t [y]\t [kW or kWh]\t [kW or kWh]\t [kW or kWh]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [-]\t [kgCO2-eq./kW or kWh] " > ( PathName & "/Assets.txt");
			for {i in END_USES_TYPES, tech in TECHNOLOGIES_OF_END_USES_TYPE[i]}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",gsub(tech,"F","Capitalf"),
						C_inv[tech],C_maint[tech],lifetime[tech],f_min[tech],F[tech],f_max[tech],
						fmin_perc[tech],
						0, #sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [tech,h,td] ) / sum {j2 in TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [j2, h2, td2] ),
						fmax_perc[tech],c_p[tech],tau[tech],GWP_constr[tech] > ( PathName & "/Assets.txt");
			}
			for {tech in STORAGE_TECH union INFRASTRUCTURE union RENOVATION}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",gsub(tech,"F","Capitalf"),
						C_inv[tech],C_maint[tech],lifetime[tech],f_min[tech],F[tech],f_max[tech],
						fmin_perc[tech],
						-1,
						fmax_perc[tech],c_p[tech],tau[tech],GWP_constr[tech] > ( PathName & "/Assets.txt");
			}

			#------------------------------------------
			#    STORAGE distribution CURVES
			#------------------------------------------
			print "--------------SAVING elec Storage -----------";
			 # storage curves
			printf "Time\t" > ( PathName & "/Distri_E_stored.txt");
			for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf "%s\t", gsub(i,"F","Capitalf") > ( PathName & "/Distri_E_stored.txt");
			}
			for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf "%s_in\t" ,{l in LAYERS: storage_eff_in  [i,l] > 0} gsub(i,"F","Capitalf") > ( PathName & "/Distri_E_stored.txt");
				printf "%s_out\t",{l in LAYERS: storage_eff_out [i,l] > 0} gsub(i,"F","Capitalf") > ( PathName & "/Distri_E_stored.txt");
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n %d\t",t  > ( PathName & "/Distri_E_stored.txt");
				for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf "%f\t", Storage_level[i, t] > ( PathName & "/Distri_E_stored.txt");
				}
				for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf "%f\t", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
									-(Storage_in [i, l, h, td] * storage_eff_in [i, l]))
							> ( PathName & "/Distri_E_stored.txt");
					printf "%f\t", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
									(Storage_out [i, l, h, td] / storage_eff_out [i, l]))
							> ( PathName & "/Distri_E_stored.txt");

				}
			}

			print "--------------SAVING TS Storage -----------";

			# storage curves
			printf "Time\t" > ( PathName & "/Distri_TS.txt");
			for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf "%s\t", gsub(i,"F","Capitalf") > ( PathName & "/Distri_TS.txt");
			}
			for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf "%s_in\t" ,{l in LAYERS: storage_eff_in  [i,l] > 0} gsub(i,"F","Capitalf") > ( PathName & "/Distri_TS.txt");
				printf "%s_out\t",{l in LAYERS: storage_eff_out [i,l] > 0} gsub(i,"F","Capitalf") > ( PathName & "/Distri_TS.txt");
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n %d\t",t  > ( PathName & "/Distri_TS.txt");
				for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf "%f\t", Storage_level[i, t] > ( PathName & "/Distri_TS.txt");
				}
				for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf "%f\t", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
									-(Storage_in [i, l, h, td] * storage_eff_in [i, l]))
							> ( PathName & "/Distri_TS.txt");
					printf "%f\t", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
									(Storage_out [i, l, h, td] / storage_eff_out [i, l]))
							> ( PathName & "/Distri_TS.txt");

				}
			}

			#------------------------------------------
			# LAYERS FLUXES
			#------------------------------------------
			print "--------------SAVING Elec Layer -----------";

			printf "Td \t Time\t" > ( PathName & "/ElecLayers.txt");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf "%s\t",gsub(i,"F","Capitalf") > ( PathName & "/ElecLayers.txt");
			}
			for {j in STORAGE_TECH }{
				printf "%s_Pin\t",gsub(j,"F","Capitalf") > ( PathName & "/ElecLayers.txt");
				printf "%s_Pout\t",gsub(j,"F","Capitalf") > ( PathName & "/ElecLayers.txt");
			}
			printf "END_USE\t" > ( PathName & "/ElecLayers.txt");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n %d \t %d\t",td,h   > ( PathName & "/ElecLayers.txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf "%f\t",(layers_in_out[i, "ELECTRICITY"] * F_t [i, h, td])> ( PathName & "/ElecLayers.txt");
				}
				for {j in STORAGE_TECH}{
					printf "%f\t",(-Storage_in [j, "ELECTRICITY", h, td]) > ( PathName & "/ElecLayers.txt");
					printf "%f\t", (Storage_out [j, "ELECTRICITY", h, td]) > ( PathName & "/ElecLayers.txt");
				}
				printf "%f\t", -End_Uses ["ELECTRICITY", h, td]  > ( PathName & "/ElecLayers.txt");
			}

			print "--------------SAVING LT Layer -----------";

			printf "Td \t Time\t" > ( PathName & "/LTLayers.txt");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf "%s\t",gsub(i,"F","Capitalf") > ( PathName & "/LTLayers.txt");
			}
			for {j in STORAGE_TECH }{
				printf "%s_Pin\t",gsub(j,"F","Capitalf") > ( PathName & "/LTLayers.txt");
				printf "%s_Pout\t",gsub(j,"F","Capitalf") > ( PathName & "/LTLayers.txt");
			}
			printf "END_USE\t" > ( PathName & "/LTLayers.txt");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n %d \t %d\t",td,h   > ( PathName & "/LTLayers.txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf "%f\t",(sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] / cop_time_series [i,"HEAT_LOW_T_DECEN", h, td] * F_t [i, h, td]))  > ( PathName & "/LTLayers.txt");
				}
				for {j in STORAGE_TECH }{
					printf "%f\t",sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]}(-Storage_in [j, l, h, td]) > ( PathName & "/LTLayers.txt");
					printf "%f\t",sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (Storage_out [j, l, h, td]) > ( PathName & "/LTLayers.txt");
				}
				printf "%f\t", sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (-End_Uses [l, h, td])  > ( PathName & "/LTLayers.txt");
			}

			print "--------------SAVING PASSANGER Layer -----------";

			printf "Td \t Time\t" > ( PathName & "/PASSANGERSLayers.txt");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "%s\t",gsub(i,"F","Capitalf") > ( PathName & "/PASSANGERSLayers.txt");
			}
			for {j in STORAGE_TECH }{
				printf "%s_Pin\t",gsub(j,"F","Capitalf") > ( PathName & "/PASSANGERSLayers.txt");
				printf "%s_Pout\t",gsub(j,"F","Capitalf") > ( PathName & "/PASSANGERSLayers.txt");
			}
			printf "END_USE\t" > ( PathName & "/PASSANGERSLayers.txt");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n %d \t %d\t",td,h   > ( PathName & "/PASSANGERSLayers.txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf "%f\t",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * F_t [i, h, td])) >
			( PathName & "/PASSANGERSLayers.txt");
				}
				for {j in STORAGE_TECH }{
					printf "%f\t",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_in [j, l, h, td]) > ( PathName & "/PASSANGERSLayers.txt");
					printf "%f\t",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_out[j, l, h, td]) > ( PathName & "/PASSANGERSLayers.txt");
				}
				printf "%f\t", sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (-End_Uses [l, h, td] ) > ( PathName & "/PASSANGERSLayers.txt");
			}

			print "--------------SAVING FREIGHT Layer -----------";

			printf "Td \t Time\t" > ( PathName & "/FREIGHTLayers.txt");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "%s\t",gsub(i,"F","Capitalf") > ( PathName & "/FREIGHTLayers.txt");
			}
			for {j in STORAGE_TECH }{
				printf "%s_Pin\t",gsub(j,"F","Capitalf") > ( PathName & "/FREIGHTLayers.txt");
				printf "%s_Pout\t",gsub(j,"F","Capitalf") > ( PathName & "/FREIGHTLayers.txt");
			}
			printf "END_USE\t" > ( PathName & "/FREIGHTLayers.txt");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n %d \t %d\t",td,h   > ( PathName & "/FREIGHTLayers.txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf "%f\t",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * F_t [i, h, td])) >
			( PathName & "/FREIGHTLayers.txt");
				}
				for {j in STORAGE_TECH }{
					printf "%f\t",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_in [j, l, h, td]) > ( PathName & "/FREIGHTLayers.txt");
					printf "%f\t",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_out[j, l, h, td]) > ( PathName & "/FREIGHTLayers.txt");
				}
				printf "%f\t", sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (-End_Uses [l, h, td] )  > ( PathName & "/FREIGHTLayers.txt");
			}


			print "--------------SAVING H2Layer -----------";

			printf "Td \t Time\t" > ( PathName & "/H2Layers.txt");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "%s\t",gsub(i,"F","Capitalf") > ( PathName & "/H2Layers.txt");
			}
			for {j in STORAGE_TECH }{
				printf "%s_Pin\t",gsub(j,"F","Capitalf") > ( PathName & "/H2Layers.txt");
				printf "%s_Pout\t",gsub(j,"F","Capitalf") > ( PathName & "/H2Layers.txt");
			}
			printf "END_USE\t" > ( PathName & "/H2Layers.txt");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n %d \t %d\t",td,h   > ( PathName & "/H2Layers.txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf "%f\t",(layers_in_out[i, "H2"] * F_t [i, h, td]) > ( PathName & "/H2Layers.txt");
				}
				for {j in STORAGE_TECH }{
					printf "%f\t",(-Storage_in [j, "H2", h, td]) > ( PathName & "/H2Layers.txt");
					printf "%f\t", (Storage_out [j, "H2", h, td]) > ( PathName & "/H2Layers.txt");
				}
				printf "%f\t", -End_Uses ["H2", h, td]  > ( PathName & "/H2Layers.txt");
			}



			#------------------------------------------
			# YEARLY BALANCE
			#------------------------------------------
			print "--------- SAVING Yearly balances --------";

			printf "Tech\t" > ( PathName & "/YearBalance.txt");
			for {l in LAYERS}{
				printf "%s\t",gsub(l,"F","Capitalf") > ( PathName & "/YearBalance.txt");
			}
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", gsub(i,"F","Capitalf") > ( PathName & "/YearBalance.txt");
				for {l in LAYERS}{
					printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									layers_in_out[i, l] / cop_time_series [i, l, h, td] * F_t [i, h, td] > ( PathName & "/YearBalance.txt");
				}
			}
			for {j in STORAGE_TECH}{
				printf "\n %s \t", gsub(j,"F","Capitalf") > ( PathName & "/YearBalance.txt");
				for {l in LAYERS}{
					printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									(Storage_out [j, l, h, td] - Storage_in [j, l, h, td]) > ( PathName & "/YearBalance.txt");
				}
			}
			printf "\n END_USES_DEMAND \t" > ( PathName & "/YearBalance.txt");
			for {l in LAYERS}{
				printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
								End_Uses [l, h, td] > ( PathName & "/YearBalance.txt");
			}


			#------------------------------------------
            # PARAMETERS INFOs
            #------------------------------------------
			
		    print "--------- SAVING Parameters Infos --------";
            printf "\n auto_consumption_rate_input [%] = " > ( PathName & "/Parameters_Infos.txt");
            printf "%f", 100*auto_consumption_rate > ( PathName & "/Parameters_Infos.txt");
			printf "\n auto_consumption_rate_real [%] = " > ( PathName & "/Parameters_Infos.txt");
            {if (sum{j in HOME_TECHNOLOGIES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} F_t [j, h, td]) > 0.001 
			then 
			printf "%f",100*(sum{j in HOME_TECHNOLOGIES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (layers_in_out[j,"ELECTRICITY"] * F_t [j, h, td]) - sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} F_t ["ELEC_EXPORT", h, td]) / (sum{j in HOME_TECHNOLOGIES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (layers_in_out[j,"ELECTRICITY"] * F_t [j, h, td] )) > (PathName & "/Parameters_Infos.txt");
            else
		    printf "%f", 0 > (PathName & "/Parameters_Infos.txt");
			}
			printf "\n auto_sufficiancy_input [%] = " > ( PathName & "/Parameters_Infos.txt");
            printf "%f", 100*auto_sufficiancy_rate > ( PathName & "/Parameters_Infos.txt");
			printf "\n auto_sufficiancy_real [%] = " > ( PathName & "/Parameters_Infos.txt");
			printf "%f", (sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum{l in LAYERS} (End_Uses [l, h, td]) - (layers_in_out["NG","NG"]*F_t ["NG", h, td] + layers_in_out["LFO","LFO"]*F_t ["LFO", h, td] + layers_in_out["WOOD","WOOD"]*F_t ["WOOD", h, td] + layers_in_out["ELECTRICITY_FEED_IN","ELECTRICITY"]*F_t ["ELECTRICITY_FEED_IN", h, td] + layers_in_out["ELECTRICITY","ELECTRICITY"]*F_t ["ELECTRICITY", h, td])))/(sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum{l in LAYERS} (End_Uses [l, h, td]))) > ( PathName & "/Parameters_Infos.txt");
			printf "\n Network_losses [%] = " > ( PathName & "/Parameters_Infos.txt"); 
            printf "%f", 100*loss_network ["ELECTRICITY"] > ( PathName & "/Parameters_Infos.txt"); 
            printf "\n re_share_primary = " > ( PathName & "/Parameters_Infos.txt"); 
            printf "%f", re_share_primary > ( PathName & "/Parameters_Infos.txt");


			################################################################################
			################################################################################
			##																			  ##
			##                     			    SANKEY 	     							  ##
			##																			  ##
			################################################################################
			################################################################################


			print "--------- SAVING SANKEY --------";

			## Generate CSV file to be used as input to Sankey diagram
			# Notes:
			# - Assuming that SNG and BioOil are used in boilers
			printf "%s,%s,%s,%s,%s,%s\n", "source" , "target", "realValue", "layerID", "layerColor", "layerUnit" > ( PathName & "/input2sankey.csv");

			#------------------------------------------
			# SANKEY - RESOURCES
			#------------------------------------------
			## Gasoline
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
				(F_t ["GASOLINE", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										(layers_in_out["GASOLINE","GASOLINE"] * F_t ["GASOLINE", h, td]  ) , "Gasoline",
			"#808080", "TWh" > ( PathName & "/input2sankey.csv");

			## Diesel
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["CAR_DIESEL", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_DIESEL","DIESEL"] * F_t ["CAR_DIESEL", h, td]  ) , "Diesel",
			"#D3D3D3", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t ["BUS_COACH_DIESEL", h, td] +
			F_t["BUS_COACH_HYDIESEL", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_DIESEL","DIESEL"] * F_t ["BUS_COACH_DIESEL", h, td]   -
			layers_in_out["BUS_COACH_HYDIESEL","DIESEL"] * F_t ["BUS_COACH_HYDIESEL", h, td]   )  , "Diesel", "#D3D3D3", "TWh"
			> ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t ["TRUCK", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK","DIESEL"] * F_t ["TRUCK", h, td]  )  , "Diesel", "#D3D3D3", "TWh"
			> ( PathName & "/input2sankey.csv");

			## Exterior Heat #8FBC8F
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_THHP_GAS_ABS_A2W", h, td] + F_t ["DEC_THHP_GAS_ABS_G2W", h, td] + F_t ["DEC_THHP_GAS_ADS_G2W", h, td] + F_t ["DEC_HP_ELEC_A2A", h,td] + F_t ["DEC_HP_ELEC_A2W", h,td] + F_t ["DEC_HP_ELEC_A2W_small", h,td] + F_t ["DEC_HP_ELEC_G2W", h,td] + F_t ["DEC_HP_ELEC_G2W_small", h,td] + F_t ["DEC_HP_ELEC_G2W_big", h,td] ) > 0.001 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Exterior Heat" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]} (
				  layers_in_out["DEC_HP_ELEC_A2A","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_HP_ELEC_A2A","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_A2A", h, td] + (layers_in_out["DEC_HP_ELEC_A2A","ELECTRICITY"] / cop_time_series ["DEC_HP_ELEC_A2A","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_A2A", h, td])  
				+ layers_in_out["DEC_HP_ELEC_A2W","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_HP_ELEC_A2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_A2W", h, td] + (layers_in_out["DEC_HP_ELEC_A2W","ELECTRICITY"] / cop_time_series ["DEC_HP_ELEC_A2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_A2W", h, td])  
				+ layers_in_out["DEC_HP_ELEC_A2W_small","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_HP_ELEC_A2W_small","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_A2W_small", h, td] + (layers_in_out["DEC_HP_ELEC_A2W_small","ELECTRICITY"] / cop_time_series ["DEC_HP_ELEC_A2W_small","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_A2W_small", h, td])  
				+ layers_in_out["DEC_HP_ELEC_G2W","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_HP_ELEC_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_G2W", h, td] + (layers_in_out["DEC_HP_ELEC_G2W","ELECTRICITY"] / cop_time_series ["DEC_HP_ELEC_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_G2W", h, td])  
				+ layers_in_out["DEC_HP_ELEC_G2W_small","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_HP_ELEC_G2W_small","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_G2W_small", h, td] + (layers_in_out["DEC_HP_ELEC_G2W_small","ELECTRICITY"] / cop_time_series ["DEC_HP_ELEC_G2W_small","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_G2W_small", h, td])  
				+ layers_in_out["DEC_HP_ELEC_G2W_big","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_HP_ELEC_G2W_big","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_G2W_big", h, td] + (layers_in_out["DEC_HP_ELEC_G2W_big","ELECTRICITY"] / cop_time_series ["DEC_HP_ELEC_G2W_big","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_HP_ELEC_G2W_big", h, td])  
				+ layers_in_out["DEC_THHP_GAS_ABS_A2W","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_THHP_GAS_ABS_A2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ABS_A2W", h, td] + layers_in_out["DEC_THHP_GAS_ABS_A2W","NG"] / cop_time_series ["DEC_THHP_GAS_ABS_A2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ABS_A2W", h, td] 
				+ layers_in_out["DEC_THHP_GAS_ADS_G2W","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_THHP_GAS_ADS_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ADS_G2W", h, td] + layers_in_out["DEC_THHP_GAS_ADS_G2W","NG"] / cop_time_series ["DEC_THHP_GAS_ADS_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ADS_G2W", h, td] 
				+ layers_in_out["DEC_THHP_GAS_ABS_G2W","HEAT_LOW_T_DECEN"] / cop_time_series ["DEC_THHP_GAS_ABS_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ABS_G2W", h, td] + layers_in_out["DEC_THHP_GAS_ABS_G2W","NG"] / cop_time_series ["DEC_THHP_GAS_ABS_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ABS_G2W", h, td] 
			 )
			, "Exterior Heat", "#8FBC8F", "TWh" > ( PathName & "/input2sankey.csv");


			## Natural Gas
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["CAR_NG", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_NG","NG"] * F_t ["CAR_NG", h, td]  )  , "NG", "#FFD700", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["BUS_COACH_CNG_STOICH", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_CNG_STOICH","NG"] * F_t ["BUS_COACH_CNG_STOICH", h, td]  )  ,
			"NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["H2_NG", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "H2 prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_NG","NG"] * F_t ["H2_NG", h, td]  )  , "NG", "#FFD700", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_COGEN_GAS", h,
			td] + F_t ["DEC_COGEN_GAS", h, td] + F_t ["DEC_ADVCOGEN_GAS", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_COGEN_GAS","NG"] * F_t ["DHN_COGEN_GAS", h, td]   - layers_in_out["DEC_COGEN_GAS","NG"] * F_t
			["DEC_COGEN_GAS", h, td]   - layers_in_out["DEC_ADVCOGEN_GAS","NG"] * F_t ["DEC_ADVCOGEN_GAS", h, td]  ) , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_THHP_GAS_ABS_A2W", h, td] + F_t ["DEC_THHP_GAS_ABS_G2W", h, td] + F_t ["DEC_THHP_GAS_ADS_G2W", h, td] ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(
					-layers_in_out["DEC_THHP_GAS_ABS_A2W","NG"] / cop_time_series ["DEC_THHP_GAS_ABS_A2W","HEAT_LOW_T_DECEN",h, td] * F_t ["DEC_THHP_GAS_ABS_A2W", h, td]  
					-layers_in_out["DEC_THHP_GAS_ABS_G2W","NG"] / cop_time_series ["DEC_THHP_GAS_ABS_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ABS_G2W", h, td]  
					-layers_in_out["DEC_THHP_GAS_ADS_G2W","NG"] / cop_time_series ["DEC_THHP_GAS_ADS_G2W","HEAT_LOW_T_DECEN", h, td] * F_t ["DEC_THHP_GAS_ADS_G2W", h, td]  
					)  , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");

			/*if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_THHP_GAS_ABS_A2W", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_THHP_GAS_ABS_G2W","NG"] * F_t ["DEC_THHP_GAS_ABS_G2W", h, td]  )  , "NG", "#FFD700",
			"TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_THHP_GAS_ADS_G2W", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_THHP_GAS_ADS_G2W","NG"] * F_t ["DEC_THHP_GAS_ADS_G2W", h, td]  )  , "NG", "#FFD700",
			"TWh" > ( PathName & "/input2sankey.csv");*/

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_BOILER_GAS",
			h, td] + F_t ["DEC_BOILER_GAS", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_BOILER_GAS","NG"] * F_t ["DHN_BOILER_GAS", h, td]   - layers_in_out["DEC_BOILER_GAS","NG"] * F_t
			["DEC_BOILER_GAS", h, td]  )  , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");

			## Electricity production
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["ELECTRICITY", h, td] + F_t ["ELECTRICITY_FEED_IN", h, td] ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electricity" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["ELECTRICITY","ELECTRICITY"] * F_t ["ELECTRICITY", h, td] + layers_in_out["ELECTRICITY_FEED_IN","ELECTRICITY"] * F_t ["ELECTRICITY_FEED_IN", h, td])  ,
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["WIND", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WIND","ELECTRICITY"] * F_t ["WIND", h, td]  )  , "Wind", "#27AE34", "TWh"
			> ( PathName & "/input2sankey.csv");
			
			# Solar
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["PV", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["PV","ELECTRICITY"] * F_t ["PV", h, td]  )  , "Solar", "#FFFF00", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_SOLAR", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Heat", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out["DEC_SOLAR","HEAT_LOW_T_DECEN"] * (F_t ["DEC_SOLAR", h, td])), "Solar", "#FFFF00", "TWh" > ( PathName & "/input2sankey.csv");

			# Waste
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_COGEN_WASTE", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_COGEN_WASTE","WASTE"] * F_t ["DHN_COGEN_WASTE", h, td]  )  , "Waste", "#808000", "TWh" >
			( PathName & "/input2sankey.csv");

			# Oil
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DEC_COGEN_OIL", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_COGEN_OIL","LFO"] * F_t ["DEC_COGEN_OIL", h, td]  )  , "Oil",
			"#8B008B", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_BOILER_OIL",
			h, td] + F_t ["DEC_BOILER_OIL", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_BOILER_OIL","LFO"] * F_t ["DHN_BOILER_OIL", h, td]   - layers_in_out["DEC_BOILER_OIL","LFO"] *
			F_t ["DEC_BOILER_OIL", h, td]  )  , "Oil", "#8B008B", "TWh" > ( PathName & "/input2sankey.csv");

			# Wood
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["H2_BIOMASS", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "H2 prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_BIOMASS","WOOD"] * F_t ["H2_BIOMASS", h, td]  )  , "Wood", "#CD853F",
			"TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["GASIFICATION_SNG", h, td] + F_t ["PYROLYSIS", h,
			td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Biofuels", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["GASIFICATION_SNG","WOOD"] * F_t ["GASIFICATION_SNG", h, td]   -
			layers_in_out["PYROLYSIS","WOOD"] * F_t ["PYROLYSIS", h, td]  )  , "Wood", "#CD853F", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_COGEN_WOOD",
			h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_COGEN_WOOD","WOOD"] * F_t ["DHN_COGEN_WOOD", h, td]  )  , "Wood", "#CD853F", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_BOILER_WOOD", h, td] + F_t ["DEC_BOILER_WOOD", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_BOILER_WOOD","WOOD"] * F_t ["DHN_BOILER_WOOD", h, td] - layers_in_out["DEC_BOILER_WOOD","WOOD"] *
			F_t ["DEC_BOILER_WOOD", h, td]  )  , "Wood", "#CD853F", "TWh" > ( PathName & "/input2sankey.csv");


			#----------------------------------------------------------------------------------------------
			# SANKEY - Electricity use
			#----------------------------------------------------------------------------------------------
			
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["CAR_PHEV", h, td] + F_t ["CAR_BEV", h, td]) ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_PHEV","ELECTRICITY"] * F_t ["CAR_PHEV", h, td]   -
			layers_in_out["CAR_BEV","ELECTRICITY"] * F_t ["CAR_BEV", h, td]  )  , "Electricity", "#00BFFF", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["TRAIN_PUB", h, td] + F_t ["TRAMWAY_TROLLEY", h,
			td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRAIN_PUB","ELECTRICITY"] * F_t ["TRAIN_PUB", h, td]   -
			layers_in_out["TRAMWAY_TROLLEY","ELECTRICITY"] * F_t ["TRAMWAY_TROLLEY", h, td]  )  , "Electricity", "#00BFFF",
			"TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["TRAIN_FREIGHT", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRAIN_FREIGHT","ELECTRICITY"] * F_t ["TRAIN_FREIGHT", h, td]  )  ,
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( F_t ["ELEC_EXPORT", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Export", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(- layers_in_out["ELEC_EXPORT","ELECTRICITY"] * F_t ["ELEC_EXPORT", h, td])
			, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_Uses ["ELECTRICITY", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Elec demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_Uses
			["ELECTRICITY", h, td]  - Network_losses ["ELECTRICITY", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"]} (Storage_out [i, "ELECTRICITY", h, td]))
			) , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");

			# New boxes for Electricity storage
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "ELECTRICITY", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Storage", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }(Storage_in [i, "ELECTRICITY", h, td]
			)                                                                                         ) , "Electricity", "#00BFFF",
			"TWh" > ( PathName & "/input2sankey.csv");
			
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "ELECTRICITY", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Elec demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }                                                        (Storage_out [i, "ELECTRICITY", h, td] )  ) , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");

			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "ELECTRICITY", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Losses", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }((Storage_in [i, "ELECTRICITY", h, td])- (Storage_out [i, "ELECTRICITY", h, td] ))  ) , "Electricity", "#708090", "TWh" > ( PathName & "/input2sankey.csv");

			## HEAT PROD======================================================================================

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DHN_HP_ELEC", h, td] + F_t ["DEC_HP_ELEC_A2A", h,
			td] + F_t ["DHN_HP_ELEC", h, td] + F_t ["DEC_HP_ELEC_A2W", h, td] + F_t ["DEC_HP_ELEC_A2W_small", h, td] + F_t ["DHN_HP_ELEC", h, td] + F_t ["DEC_HP_ELEC_G2W", h, td] ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (
					-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_A2A","ELECTRICITY"]* F_t ["DEC_HP_ELEC_A2A", h, td] /*/ (cop_time_series ["DEC_HP_ELEC_A2A","HEAT_LOW_T_DECEN", h, td])*/
					-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_A2W","ELECTRICITY"]* F_t ["DEC_HP_ELEC_A2W", h, td] /* (cop_time_series ["DEC_HP_ELEC_A2W","HEAT_LOW_T_DECEN", h, td])*/
					-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_G2W","ELECTRICITY"]* F_t ["DEC_HP_ELEC_G2W", h, td] /* (cop_time_series ["DEC_HP_ELEC_G2W","HEAT_LOW_T_DECEN", h, td])*/
					-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_G2W_small","ELECTRICITY"]* F_t ["DEC_HP_ELEC_G2W_small", h, td] /* (cop_time_series ["DEC_HP_ELEC_G2W_small","HEAT_LOW_T_DECEN", h, td])*/
					-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_G2W_big","ELECTRICITY"]* F_t ["DEC_HP_ELEC_G2W_big", h, td] /* (cop_time_series ["DEC_HP_ELEC_G2W_small","HEAT_LOW_T_DECEN", h, td])*/
					-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_A2W_small","ELECTRICITY"]* F_t ["DEC_HP_ELEC_A2W_small", h, td] /* (cop_time_series ["DEC_HP_ELEC_A2W_small","HEAT_LOW_T_DECEN", h, td])*/
					)  , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			/*if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_HP_ELEC", h, td] + F_t ["DEC_HP_ELEC_A2W", h,
			td]) ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]} (-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_A2W","ELECTRICITY"]* F_t ["DEC_HP_ELEC_A2W", h, td]*(cop_time_series ["DEC_HP_ELEC_A2W","ELECTRICITY", h, td]))  , "Electricity", "#00BFFF", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_HP_ELEC", h, td] + F_t ["DEC_HP_ELEC_G2W", h,
			td]) ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]} (-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t ["DHN_HP_ELEC", h, td] - layers_in_out["DEC_HP_ELEC_G2W","ELECTRICITY"]* F_t ["DEC_HP_ELEC_G2W", h, td]*(cop_time_series ["DEC_HP_ELEC_G2W","ELECTRICITY", h, td]))  , "Electricity", "#00BFFF", "TWh" >
			( PathName & "/input2sankey.csv");*/
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["H2_ELECTROLYSIS", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "H2 prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_ELECTROLYSIS","ELECTRICITY"] * F_t ["H2_ELECTROLYSIS", h, td]  )  ,
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_DIRECT_ELEC", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t ["DEC_DIRECT_ELEC", h, td])
					, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");


			# H2 use
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DEC_ADVCOGEN_H2", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_ADVCOGEN_H2","H2"] * F_t ["DEC_ADVCOGEN_H2", h, td]  )  , "H2",
			"#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["CAR_FUEL_CELL", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_FUEL_CELL","H2"] * F_t ["CAR_FUEL_CELL", h, td]  )  , "H2",
			"#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["BUS_COACH_FC_HYBRIDH2", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_FC_HYBRIDH2","H2"] * F_t ["BUS_COACH_FC_HYBRIDH2", h, td]  )  ,
			"H2", "#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");


			#------------------------------------------
			# SANKEY - HEATING
			#------------------------------------------
			
			# CHP
			if sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [ i, h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Elec", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"ELECTRICITY"] * F_t [i, h, td]  )  , "Electricity", "#00BFFF", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DEC_COGEN_GAS", h, td] + F_t ["DEC_COGEN_OIL", h,
			td] + F_t ["DEC_ADVCOGEN_GAS", h, td] + F_t ["DEC_ADVCOGEN_H2", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat",
					(sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						(layers_in_out[i,"HEAT_LOW_T_DECEN"] * F_t [i, h, td])), "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_COGEN_GAS", h, td] + F_t ["DHN_COGEN_WOOD",
			h, td] + F_t ["DHN_COGEN_WASTE", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "DHN", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_LOW_T_DHN"] * F_t [i, h, td]  )  , "Heat LT", "#FA8072", "TWh" >
			( PathName & "/input2sankey.csv");

			# HPs
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( (F_t ["DEC_HP_ELEC_A2A", h, td] + F_t ["DEC_HP_ELEC_A2W", h, td] + F_t ["DEC_HP_ELEC_A2W_small", h, td] + F_t ["DEC_HP_ELEC_G2W", h, td] + F_t ["DEC_HP_ELEC_G2W_small", h, td] + F_t ["DEC_HP_ELEC_G2W_big", h, td] 
			+ F_t ["DEC_THHP_GAS_ABS_A2W", h,td] + F_t ["DEC_THHP_GAS_ABS_G2W", h,td] + F_t ["DEC_THHP_GAS_ADS_G2W", h,td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Heat",
				sum {hp in HPS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									(layers_in_out[hp,"HEAT_LOW_T_DECEN"] / cop_time_series [hp,"HEAT_LOW_T_DECEN", h, td] * F_t [hp, h, td])
					/*sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(
						(layers_in_out["DEC_HP_ELEC_A2A","HEAT_LOW_T_DECEN"] * F_t ["DEC_HP_ELEC_A2A", h, td])
						+ (layers_in_out["DEC_HP_ELEC_A2W","HEAT_LOW_T_DECEN"] * F_t ["DEC_HP_ELEC_A2W", h, td])
						+ (layers_in_out["DEC_HP_ELEC_A2W_small","HEAT_LOW_T_DECEN"] * F_t ["DEC_HP_ELEC_A2W_small", h, td])    
						+ (layers_in_out["DEC_HP_ELEC_G2W","HEAT_LOW_T_DECEN"] * F_t ["DEC_HP_ELEC_G2W", h, td])   
						+ (layers_in_out["DEC_HP_ELEC_G2W_small","HEAT_LOW_T_DECEN"] * F_t ["DEC_HP_ELEC_G2W_small", h, td])   
						+ (layers_in_out["DEC_THHP_GAS_ABS_A2W","HEAT_LOW_T_DECEN"] * F_t ["DEC_THHP_GAS_ABS_A2W", h, td])
						+ (layers_in_out["DEC_THHP_GAS_ABS_G2W","HEAT_LOW_T_DECEN"] * F_t ["DEC_THHP_GAS_ABS_G2W", h, td])
						+ (layers_in_out["DEC_THHP_GAS_ADS_G2W","HEAT_LOW_T_DECEN"] * F_t ["DEC_THHP_GAS_ADS_G2W", h, td])
						)*/
					, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t ["DHN_HP_ELEC", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}((layers_in_out["DHN_HP_ELEC","HEAT_LOW_T_DHN"] * F_t ["DHN_HP_ELEC", h, td]  )   - (
			(Storage_in ["TS_DEC", "ELECTRICITY", h, td]) )), "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");

			# Biofuels
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["GASIFICATION_SNG", h, td] + F_t ["PYROLYSIS", h,
			td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","ELECTRICITY"] * F_t ["GASIFICATION_SNG", h, td]   +
			layers_in_out["PYROLYSIS","ELECTRICITY"] * F_t ["PYROLYSIS", h, td]  )  , "Electricity", "#00BFFF", "TWh" >
			( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["GASIFICATION_SNG", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","NG"] * F_t ["GASIFICATION_SNG", h, td]  )  , "NG",
			"#FFD700", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["PYROLYSIS", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["PYROLYSIS","LFO"] * F_t ["PYROLYSIS", h, td]  )  , "Oil", "#8B008B", "TWh"
			> ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["GASIFICATION_SNG", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","HEAT_LOW_T_DHN"] * F_t ["GASIFICATION_SNG", h, td]  ) ,
			"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");


			# Boilers
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DEC_BOILER_GAS", h, td] + F_t ["DEC_BOILER_WOOD",
			h, td] + F_t ["DEC_BOILER_OIL", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat",
				sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out[i,"HEAT_LOW_T_DECEN"] * F_t [i, h, td] ),
						"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t ["DHN_BOILER_GAS", h, td] + F_t ["DHN_BOILER_WOOD",
			h, td] + F_t ["DHN_BOILER_OIL", h, td])  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "DHN", sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_LOW_T_DHN"] * F_t [i, h, td]  )  , "Heat LT", "#FA8072", "TWh" >
			( PathName & "/input2sankey.csv");

			# DHN
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_Uses ["HEAT_LOW_T_DHN", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Heat LT DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
				(sum {i in TECHNOLOGIES diff STORAGE_TECH } (layers_in_out[i, "HEAT_LOW_T_DHN"] * F_t [i, h, td]  )
				- Network_losses ["HEAT_LOW_T_DHN", h, td]
				- sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"]} (Storage_in  [i, "HEAT_LOW_T_DHN", h, td]))
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses ["HEAT_LOW_T_DHN", h, td]  ) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Loss DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses
			["HEAT_LOW_T_DHN", h, td]  )  , "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");

			# DHN storage :
			# Sto in  : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_in  [i, "HEAT_LOW_T_DHN", h, td])
			# Sto out : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_out [i, "HEAT_LOW_T_DHN", h, td])
			if sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in  [i, "HEAT_LOW_T_DHN", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "DHN Sto", sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_in  [i, "HEAT_LOW_T_DHN", h, td])
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			if sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_out  [i, "HEAT_LOW_T_DHN", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN Sto" , "Heat LT DHN", sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_out  [i, "HEAT_LOW_T_DHN", h, td])
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
						#Storage Dec :


			# New boxes for Heat storage
			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "HEAT_LOW_T_DECEN", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Heat" , "Dec. Sto", sum{ i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "HEAT_LOW_T_DECEN", h, td]) , "Heat LT", "#FA8072",	"TWh" > ( PathName & "/input2sankey.csv");
			
			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "HEAT_LOW_T_DECEN", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Dec. Sto" , "Heat LT Dec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"] }(Storage_out [i, "HEAT_LOW_T_DECEN", h, td] )  ) , "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");

			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [i, "HEAT_LOW_T_DECEN", h, td]) > 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Dec. Sto" , "Losses", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i
			in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"] }((Storage_in [i, "HEAT_LOW_T_DECEN", h, td])- (Storage_out [i, "HEAT_LOW_T_DECEN", h, td] ))  ) , "Heat", "#708090", "TWh" > ( PathName & "/input2sankey.csv");

			#From Heat Layer to Heat LT Dec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_Uses ["HEAT_LOW_T_DECEN", h, td]  ) > 0.001 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Heat" , "Heat LT Dec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_Uses
			["HEAT_LOW_T_DECEN", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]} (Storage_out [i, "HEAT_LOW_T_DECEN", h, td]))
			) , "Heat", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");

			#STORAGE DECENTRALISED :
			# inputs :
			#     -Direct elec : sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#						((max(Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_DIRECT_ELEC"  ,h,td]  /max(0.001,Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] )))
			#     -HPs         : sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#						((max(Storage_in["TS_DEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_HP_ELEC"      ,h,td]  /max(0.001,Storage_in["TS_DEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_THHP_GAS"     ,h,td]  /max(0.001,Storage_in["TS_DEC"    , "HEAT_LOW_T_DECEN", h, td] )))
			#     -Boilers     : sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#					    ((max(Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_BOILER_GAS"   ,h,td]  /max(0.001,Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_BOILER_WOOD"  ,h,td]  /max(0.001,Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_BOILER_OIL"   ,h,td]  /max(0.001,Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] )))
			#	  -CHP_dec     : sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#					    ((max(Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_COGEN_GAS"    ,h,td]  /max(0.001,Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC", "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_ADVCOGEN_GAS" ,h,td]  /max(0.001,Storage_in["TS_DEC", "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_COGEN_OIL"    ,h,td]  /max(0.001,Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_Solar["DEC_ADVCOGEN_H2"  ,h,td]  /max(0.001,Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] )))
			#     -DEC_SOLAR   : sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#						((max(Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_DIRECT_ELEC"  ,h,td]  /max(0.001,Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] ))+
			#						 (max(Storage_in["TS_DEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_HP_ELEC"      ,h,td]  /max(0.001,Storage_in["TS_DEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_THHP_GAS"     ,h,td]  /max(0.001,Storage_in["TS_DEC"    , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_BOILER_GAS"   ,h,td]  /max(0.001,Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_BOILER_WOOD"  ,h,td]  /max(0.001,Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_BOILER_OIL"   ,h,td]  /max(0.001,Storage_in["TS_DEC"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_COGEN_GAS"    ,h,td]  /max(0.001,Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC", "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_ADVCOGEN_GAS" ,h,td]  /max(0.001,Storage_in["TS_DEC", "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_COGEN_OIL"    ,h,td]  /max(0.001,Storage_in["TS_DEC"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out["TS_DEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_Solar["DEC_ADVCOGEN_H2"  ,h,td]  /max(0.001,Storage_in["TS_DEC" , "HEAT_LOW_T_DECEN", h, td] )))
			# outputs :
			# 	  -Storage_out     : sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in TS_DEC}
			#						(max{0,Storage_out[i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[i , "HEAT_LOW_T_DECEN", h, td]})



		}# END SAVING
}}#End cartography loop
